<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Android视图绑定ViewBinding的使用</title>
    <link href="/2021/02/25/%E4%BD%BF%E7%94%A8%E8%A7%86%E5%9B%BE%E7%BB%91%E5%AE%9AViewBinding/"/>
    <url>/2021/02/25/%E4%BD%BF%E7%94%A8%E8%A7%86%E5%9B%BE%E7%BB%91%E5%AE%9AViewBinding/</url>
    
    <content type="html"><![CDATA[<h1 id="Android视图绑定ViewBinding的使用"><a href="#Android视图绑定ViewBinding的使用" class="headerlink" title="Android视图绑定ViewBinding的使用"></a>Android视图绑定<code>ViewBinding</code>的使用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>在我们的开发过程中需要获取<code>XML</code>布局文件中的<code>ViewId</code>以便其赋值显示，所以我们习惯了使用<code>findViewById</code>进行操作</p><p>从<code>Android Studio 3.6 </code> 开始，视图绑定能够通过生成绑定对象来替代 <code>findViewById</code>，从而可以帮您简化代码、移除 bug，并且从<code>findViewById</code>  的模版代码中解脱出来。</p></blockquote><h2 id="在build-gradle中开启视图绑定"><a href="#在build-gradle中开启视图绑定" class="headerlink" title="在build.gradle中开启视图绑定"></a>在<code>build.gradle</code>中开启视图绑定</h2><blockquote><p>开启视图绑定无需引入任何额外依赖，从<code>Android Studio 3.6</code>开始，视图绑定将会内建于<code>Anroid Gradle</code>插件中。需要打开视图绑定的话只需要在<code>build.gradle</code>文件中配置<code>viewBinding</code>选项</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// 需要 Android Gradle Plugin 3.6.0</span><br>android &#123;<br> viewBinding &#123;<br>  enabled = <span class="hljs-literal">true</span><br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在<code>Android Studio 4.0</code>中，<code>viewBinding</code>变成属性被整合到了<code>buildFeatures</code>选项中所以配置要改正；</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// Android Studio 4.0</span><br>android &#123;<br> buildFeatures &#123;<br>  viewBinding = <span class="hljs-literal">true</span><br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>配置完成后，视图绑定就会为所有布局文件自动生成对应的绑定类。无需修改原有的<code>XML</code>布局文件，视图绑定将根据你现有的布局自动完成所有工作。</p><p>视图绑定将会根据现有的<code>XML</code>布局文件，为<code>Module</code>内所有的布局文件生成绑定对象。</p></blockquote><h2 id="在Activity中使用视图绑定"><a href="#在Activity中使用视图绑定" class="headerlink" title="在Activity中使用视图绑定"></a>在<code>Activity</code>中使用视图绑定</h2><blockquote><p>假设你有一个布局文件叫做<code>activity_main.xml</code>,开启视图绑定后就会自动生成相应的<code>ActivityMainBinding</code>绑定类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.pure.myapplication;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> io.pure.myapplication.databinding.ActivityMainBinding;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AppCompatActivity</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> ActivityMainBinding binding;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);<br><br>        <span class="hljs-comment">//通过调用生成的绑定类中包含的静态 inflate() 方法，创建该绑定类的实例以供 Activity使用</span><br>        binding = ActivityMainBinding.inflate(getLayoutInflater());<br>        <span class="hljs-comment">//调用 getRoot() 方法获取对根视图的引用 将根视图传递到 setContentView() 使其成为屏幕上的活动视图</span><br>        setContentView(binding.getRoot());<br>        <span class="hljs-comment">//获取控件ID并执行操作</span><br>        binding.textView01.setText(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/PureKitS/hexo_pictures_source/main/image-20210225200047263.png" alt="image-20210225200047263"></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>水博客</tag>
      
      <tag>Java</tag>
      
      <tag>编程</tag>
      
      <tag>Android</tag>
      
      <tag>viewBinding</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初次运行Git之前的配置</title>
    <link href="/2021/02/25/%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8CGit%E4%B9%8B%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/02/25/%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8CGit%E4%B9%8B%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="初次运行Git之前的配置"><a href="#初次运行Git之前的配置" class="headerlink" title="初次运行Git之前的配置"></a>初次运行<code>Git</code>之前的配置</h1><blockquote><p>至于如何安装<code>Git</code>我就不过多叙述，我则是用<code>Scoop</code>包管理进行安装 安装过后一直没有进行用户使用的配置  用户名以及<code>SSH-KEY</code>的配置</p><p>既然已经在系统上安装了 Git，你会想要做几件事来定制你的 Git 环境。 每台计算机上只需要配置一次，程序升级时会保留配置信息。 你可以在任何时候再次通过运行命令来修改它们。</p></blockquote><blockquote><blockquote><p><code>Git</code>自带了一个<code>git config</code>的工具来帮助设置控制<code>Git</code>的外观行为的配置变量 至于使用方式和原理我就不过多介绍  下面进入正题</p></blockquote></blockquote><p>你可以通过以下命令你查看所有配置以及他们所在的文件</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">$</span> <span class="hljs-comment">git</span> <span class="hljs-comment">config</span> --<span class="hljs-comment">list</span> --<span class="hljs-comment">show</span><span class="hljs-literal">-</span><span class="hljs-comment">origin</span><br></code></pre></td></tr></table></figure><h2 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h2><blockquote><p>配置 用户名和邮件地址</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;PureK1t&quot;</span>  <span class="hljs-comment">//配置用户名</span><br>$ git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-number">928468418</span>@qq<span class="hljs-variable">.com</span>  <span class="hljs-comment">//配置用户邮箱地址</span><br><br>$ git <span class="hljs-keyword">config</span> --list <span class="hljs-comment">//列出配置信息</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/PureKitS/hexo_pictures_source/main/%E9%85%8D%E7%BD%AEGit_20210225.jpg"></p><h2 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成<code>SSH</code>密钥</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;928468418@qq.com&quot;</span><br><br><span class="hljs-variable">$ </span>ssh -T git<span class="hljs-variable">@github</span>.com /<span class="hljs-regexp">/使用命令验证是否建立链接</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/PureKitS/hexo_pictures_source/main/%E9%85%8D%E7%BD%AEGit_20210225_02.jpg"></p><p><img src="https://raw.githubusercontent.com/PureKitS/hexo_pictures_source/main/%E9%85%8D%E7%BD%AEGit_20210225_01.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Github</tag>
      
      <tag>水博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MYSQL笔记</title>
    <link href="/2021/02/25/MYSQL_purekit/"/>
    <url>/2021/02/25/MYSQL_purekit/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/PureKits/hexo_pictures_source/main/MYSQL_20210225.png"></p><h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><p>[TOC]</p><hr><h3 id="MYSQL-连接"><a href="#MYSQL-连接" class="headerlink" title="MYSQL  连接"></a>MYSQL  连接</h3><p>使用二进制方式进入mysql命令提示符下来连接mysql数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">Purekit@Mac ~~ mysql -u root -p<br>enter password:    *输入密码*<br></code></pre></td></tr></table></figure><p>接下来就进入到了mysql命令操作中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; exit;  *或者quit*  &#x2F;&#x2F;退出mysql&#x2F;&#x2F;   <br></code></pre></td></tr></table></figure><hr><h3 id="MYSQL-创建数据库"><a href="#MYSQL-创建数据库" class="headerlink" title="MYSQL 创建数据库"></a>MYSQL 创建数据库</h3><h5 id="create命令创建数据库"><a href="#create命令创建数据库" class="headerlink" title="create命令创建数据库"></a>create命令创建数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt; CREATE  DATABASE database_name ；<br></code></pre></td></tr></table></figure><h5 id="了解数据库和表"><a href="#了解数据库和表" class="headerlink" title="了解数据库和表"></a>了解数据库和表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;&#x2F;&#x2F;返回当前所有的数据库<br><br>show tables;&#x2F;&#x2F;返回当前数据库下可用的表<br><br>show columns from table_name ;&#x2F;&#x2F;返回表结构<br></code></pre></td></tr></table></figure><h5 id="选择使用数据库USE"><a href="#选择使用数据库USE" class="headerlink" title="选择使用数据库USE"></a>选择使用数据库<strong>USE</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt; use rootme ;<br>Database changed<br></code></pre></td></tr></table></figure><blockquote><p>执行以上命令后，你就已经成功选择了<strong>rootme</strong> 数据库，在后续的操作中都会在<strong>rootme</strong>数据库中执行</p></blockquote><hr><h3 id="MYSQL-数据类型"><a href="#MYSQL-数据类型" class="headerlink" title="MYSQL  数据类型"></a>MYSQL  数据类型</h3><blockquote><p>MySQL中定义数据字段的类型对你数据库的优化是非常重要的。</p></blockquote><blockquote><p>MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p></blockquote><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><blockquote><p>MySQL支持所有标准SQL数值数据类型。这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。BIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p></blockquote><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th>范围（无符号）</th><th>用途</th></tr></thead><tbody><tr><td align="left">tiyint</td><td align="left">1byte</td><td align="left">(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td align="left">smallint</td><td align="left">2bytes</td><td align="left">(-32 768，32 767)</td><td>(0，65 535)</td><td>大整数值</td></tr><tr><td align="left">mediumint</td><td align="left">3bytes</td><td align="left">(-8 388 608，8 388 607)</td><td>(0，16 777 215)</td><td>大整数值</td></tr><tr><td align="left">int or intger</td><td align="left">4bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td>(0，18 446 744 073 709 551 615)</td><td>大整数值</td></tr><tr><td align="left">bigint</td><td align="left">8bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td>极大整数值</td></tr><tr><td align="left">float</td><td align="left">4bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>单精度  浮点数值</td></tr><tr><td align="left">double</td><td align="left">8bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>依赖于M和D的值</td><td>双精度 浮点数值</td></tr><tr><td align="left">decimal</td><td align="left">对decimal（m,d)，如果m&gt;d,为，m+2否则d+2</td><td align="left">依赖于M和D的值</td><td></td><td>小数值</td></tr></tbody></table><h5 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a><strong>日期和时间类型</strong></h5><blockquote><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。TIMESTAMP类型有专有的自动更新特性，将在后面描述。</p></blockquote><table><thead><tr><th>类型</th><th>大小（bytes）</th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td>data</td><td>3</td><td>1000-01-01/9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>time</td><td>3</td><td>‘-838:59:59’/‘838:59:59’</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>year</td><td>1</td><td>1901/2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>datatime</td><td>8</td><td>1000-01-01 00:00:00/9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>timestamp</td><td>4</td><td>1970-01-01 00:00:00/2038结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07</td><td>YYYYMMDDHHMMSS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a><strong>字符串类型</strong></h5><blockquote><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p></blockquote><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>char</td><td>0-255bytes</td><td>定长字符串</td></tr><tr><td>varchar</td><td>0-65535bytes</td><td>变长字符串</td></tr><tr><td>tinyblob</td><td>0-255bytes</td><td>不超过255个字符的二进制字符串</td></tr><tr><td>tinytext</td><td>0-255bytes</td><td>段文本字符串</td></tr><tr><td>blob</td><td>0-65bytes</td><td>二进制形式的长文本字符串</td></tr><tr><td>text</td><td>0-65  535 bytes</td><td>长文本数据</td></tr><tr><td>mediumblob</td><td>0-16 777 215  bytes</td><td>二进制形式的中等长度的文本数据</td></tr><tr><td>mediumtext</td><td>0-16 777 215  bytes</td><td>中等长度的文本数据</td></tr><tr><td>longblob</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>longtext</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><hr><h3 id="MYSQL-表的创建"><a href="#MYSQL-表的创建" class="headerlink" title="MYSQL 表的创建"></a>MYSQL 表的创建</h3><p>创建mysql数据表需要以下信息：</p><ul><li><blockquote><p>表名</p></blockquote></li><li><blockquote><p>表字段名</p></blockquote></li><li><blockquote><p>定义每个表字段</p></blockquote></li></ul><p>以下为创建mysql数据表_<strong>table</strong> 的sql通用语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE  table_name (column_name column_type);<br></code></pre></td></tr></table></figure><h5 id="create-table"><a href="#create-table" class="headerlink" title="**create table  **"></a>**create table  **</h5><blockquote><p>以下我们将创建数据表<strong>root</strong>：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">Purekit@Mac~~ mysql -u root -p<br>Enter password:*******<br>mysql&gt; use rootme;<br>Database changed<br>mysql&gt; CREATE TABLE root(<br>   -&gt; id INT NOT NULL AUTO_INCREMENT,<br>   -&gt; name  VARCHAR(100) NOT NULL,<br>   -&gt; address VARCHAR(100) NOT NULL,<br>   -&gt; nowtime  DATE,<br>   -&gt; PRIMARY KEY (id )<br>   -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;<br>Query OK, 0 rows affected (0.16 sec)<br>mysql&gt;<br></code></pre></td></tr></table></figure><blockquote><blockquote><p> 注意：命令终止符为分号 ;  ,</p></blockquote></blockquote><ul><li><blockquote><p>如果你不想字段为 <strong>NULL</strong> 可以设置字段的属性为 <strong>NOT NULL</strong>， 在操作数据库时如果输入该字段的数据为<strong>NULL</strong> ，就会报错。</p></blockquote></li><li><blockquote><p>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。</p></blockquote></li><li><blockquote><p>PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</p></blockquote></li><li><blockquote><p>ENGINE 设置存储引擎，CHARSET 设置编码。</p></blockquote></li></ul><p>以下将使用mysql 命令检索创建表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">describe table_name ; &#x2F;&#x2F;可以简写为 desc<br><br>or<br><br>show create table table_name ; &#x2F;&#x2F;查看创建表的语句<br><br>or<br><br>show columns from table_name ;&#x2F;&#x2F;同 desc 命令作用一样<br></code></pre></td></tr></table></figure><p> ![image-20200501110909834](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200501110909834.png)</p><hr><h3 id="MYSQL-INSERT-INTO"><a href="#MYSQL-INSERT-INTO" class="headerlink" title="MYSQL INSERT INTO"></a>MYSQL INSERT INTO</h3><p>以下为向mysql数据表中插入数据通用的<strong>insert  into table_ name  values</strong> sql 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT  INTO table_name (field1 ,  field2 , .......fieldN )<br>values <br>(values1 , values2 , .......valuesN);<br>如果数值是字符型，必须使用单引号或者双引号，如“values”。<br></code></pre></td></tr></table></figure><p>以下我们向<strong>root</strong>表中插入三条数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">purekit@mac~~ mysql -u root -p<br>enter password:*******<br>mysql &gt; use rootme ;<br>Database changed <br>mysql &gt; INSERT INTO root<br>     -&gt; VALUES<br>     -&gt; (1,&quot;学习 PHP&quot;, &quot;菜鸟教程&quot;, NOW());<br>Query OK, 1 rows affected, 1 warnings (0.01 sec)<br>mysql &gt;  INSERT INTO root<br>     -&gt; VALUES<br>     -&gt; (2,&quot;学习 MySQL&quot;, &quot;菜鸟教程&quot;, NOW());<br>Query OK, 1 rows affected, 1 warnings (0.01 sec)<br>mysql &gt; INSERT INTO root<br>     -&gt; VALUES<br>     -&gt; (3,&quot;JAVA 教程&quot;, &quot;RUNOOB.COM&quot;, NOW());<br>Query OK, 1 rows affected (0.00 sec)<br>mysql &gt;<br></code></pre></td></tr></table></figure><p>接下来我们可以通过以下语句查询数据表数据：</p><p><code>读取数据表</code></p><p><code>select  * from root ; </code></p><p><code>输出结果</code></p><p> ![image-20200501112856984](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200501112856984.png)</p><hr><h3 id="SELECT-检索"><a href="#SELECT-检索" class="headerlink" title="SELECT  检索"></a>SELECT  检索</h3><blockquote><p>数据库使用<strong>select</strong>语句进行查询数据</p></blockquote><p>以下为在mysql数据库中查询数据通用的<strong>select</strong>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT column_name,column_name<br>FROM table_name<br>[WHERE Clause]<br>[LIMIT N][ OFFSET M]<br></code></pre></td></tr></table></figure><ul><li><blockquote><p>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件</p></blockquote></li><li><blockquote><p>SELECT 命令可以读取一条或者多条记录。</p></blockquote></li><li><blockquote><p>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</p></blockquote></li><li><blockquote><p>你可以使用 WHERE 语句来包含任何条件</p></blockquote></li><li><blockquote><p>你可以使用 LIMIT 属性来设定返回的记录数</p></blockquote></li><li><blockquote><p>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0</p></blockquote></li></ul><p>使用样本数据库 <strong>websites</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from websites;<br>+----+----------+------------------+-------+---------+<br>| id | name     | url              | alexa | country |<br>+----+----------+------------------+-------+---------+<br>|  1 | Google   | www.google.com   |     1 | USA     |<br>|  2 | taobao   | www.taobao.com   |    13 | CN      |<br>|  3 | weibo    | www.weibo.com    |    20 | CN      |<br>|  4 | facebook | www.facebook.com |     3 | USA     |<br>|  5 | JD       | www.JD.com       |    10 | CN      |<br>+----+----------+------------------+-------+---------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="检索单个列"><a href="#检索单个列" class="headerlink" title="检索单个列"></a>检索单个列</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段名 from table_name ;<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select name from websites;<br>+----------+<br>| name     |<br>+----------+<br>| Google   |<br>| taobao   |<br>| weibo    |<br>| facebook |<br>| JD       |<br>+----------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="检索多个列"><a href="#检索多个列" class="headerlink" title="检索多个列"></a>检索多个列</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select name , id , country from websites;<br>+----------+----+---------+<br>| name     | id | country |<br>+----------+----+---------+<br>| Google   |  1 | USA     |<br>| taobao   |  2 | CN      |<br>| weibo    |  3 | CN      |<br>| facebook |  4 | USA     |<br>| JD       |  5 | CN      |<br>+----------+----+---------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="检索所有列"><a href="#检索所有列" class="headerlink" title="检索所有列"></a>检索所有列</h5><blockquote><p>使用通配符（ * ） 检索</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from websites;<br>+----+----------+------------------+-------+---------+<br>| id | name     | url              | alexa | country |<br>+----+----------+------------------+-------+---------+<br>|  1 | Google   | www.google.com   |     1 | USA     |<br>|  2 | taobao   | www.taobao.com   |    13 | CN      |<br>|  3 | weibo    | www.weibo.com    |    20 | CN      |<br>|  4 | facebook | www.facebook.com |     3 | USA     |<br>|  5 | JD       | www.JD.com       |    10 | CN      |<br>+----+----------+------------------+-------+---------+<br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h5 id="检索不同的行"><a href="#检索不同的行" class="headerlink" title="检索不同的行"></a>检索不同的行</h5><blockquote><p>在表中，一个列可能会包含多个重复值，有时您也许希望仅仅列出不同（distinct）的值。<strong>DISTINCT</strong> 关键词用于返回唯一不同的值。</p></blockquote><p><strong>SELECT DISTINCT 语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DISTINCT column_name,column_name<br>FROM table_name;<br></code></pre></td></tr></table></figure><p><strong>使用distinct</strong></p><blockquote><p>下面的 SQL 语句仅从 “Websites” 表的 “country” 列中选取唯一不同的值，也就是去掉 “country” 列重复值：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select country from websites;&#x2F;&#x2F;没有使用 distinct<br>+---------+<br>| country |<br>+---------+<br>| USA     |<br>| CN      |<br>| CN      |<br>| USA     |<br>| CN      |<br>+---------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br><br><br>mysql&gt; select distinct  country from websites;<br>+---------+<br>| country |<br>+---------+<br>| USA     |<br>| CN      |<br>+---------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="限制结果"><a href="#限制结果" class="headerlink" title="限制结果"></a>限制结果</h5><blockquote><p>SELECT语句返回所有匹配的行，它们可能是指定表中的每个行。为了返回第一行或前几行，可使用LIMIT子句。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from websites<br>    -&gt; limit 2;<br>+----+--------+----------------+-------+---------+<br>| id | name   | url            | alexa | country |<br>+----+--------+----------------+-------+---------+<br>|  1 | Google | www.google.com |     1 | USA     |<br>|  2 | taobao | www.taobao.com |    13 | CN      |<br>+----+--------+----------------+-------+---------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="完全限定表名、字段名"><a href="#完全限定表名、字段名" class="headerlink" title="完全限定表名、字段名"></a>完全限定表名、字段名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br>mysql&gt; select websites.name from websites;<br>+----------+<br>| name     |<br>+----------+<br>| Google   |<br>| taobao   |<br>| weibo    |<br>| facebook |<br>| JD       |<br>+----------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br><br>mysql&gt; select websites.name from rootme.websites;<br>+----------+<br>| name     |<br>+----------+<br>| Google   |<br>| taobao   |<br>| weibo    |<br>| facebook |<br>| JD       |<br>+----------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="ORDER-BY-排序检索"><a href="#ORDER-BY-排序检索" class="headerlink" title="ORDER BY 排序检索"></a>ORDER BY 排序检索</h3><blockquote><p>我们知道从 MySQL 表中使用 SQL SELECT 语句来读取数据。如果我们需要对读取的数据进行排序，我们就可以使用 MySQL 的 <strong>ORDER BY</strong> 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。</p></blockquote><p>以下是SQL <strong>SELECT</strong>语句使用<strong>ORDER BY</strong> 子句将查询数据<strong>排序后</strong>在返回数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT field1, field2,...fieldN FROM table_name1, table_name2...<br>ORDER BY field1 [ASC [DESC][默认 ASC]], [field2...] [ASC [DESC][默认 ASC]]<br></code></pre></td></tr></table></figure><ul><li><blockquote><p>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</p></blockquote></li><li><blockquote><p>你可以设定多个字段来排序。</p></blockquote></li><li><blockquote><p>你可以使用 <strong>ASC</strong> 或 <strong>DESC</strong> 关键字来设置查询结果是按<strong>升序</strong>或<strong>降序</strong>排列。 默认情况下，它是按<strong>升序</strong>排列。</p></blockquote></li><li><blockquote><p>你可以添加 WHERE…LIKE 子句来设置条件。</p></blockquote></li></ul><h5 id="ASC（升序）"><a href="#ASC（升序）" class="headerlink" title="ASC（升序）"></a><strong>ASC（升序）</strong></h5><blockquote><p>以下将在SQL <strong>SELECT</strong>语句中使用<strong>ORDER BY **子句来读取mysql数据表</strong>root**中的数据：  默认是升序排列</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from websites order by id asc ;<br>+----+----------+------------------+-------+---------+<br>| id | name     | url              | alexa | country |<br>+----+----------+------------------+-------+---------+<br>|  1 | Google   | www.google.com   |     1 | USA     |<br>|  2 | taobao   | www.taobao.com   |    13 | CN      |<br>|  3 | weibo    | www.weibo.com    |    20 | CN      |<br>|  4 | facebook | www.facebook.com |     3 | USA     |<br>|  5 | JD       | www.JD.com       |    10 | CN      |<br>+----+----------+------------------+-------+---------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br><br></code></pre></td></tr></table></figure><h5 id="DESC-降序）"><a href="#DESC-降序）" class="headerlink" title="DESC(降序）"></a><strong>DESC(降序）</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from websites order by id desc ;<br>+----+----------+------------------+-------+---------+<br>| id | name     | url              | alexa | country |<br>+----+----------+------------------+-------+---------+<br>|  5 | JD       | www.JD.com       |    10 | CN      |<br>|  4 | facebook | www.facebook.com |     3 | USA     |<br>|  3 | weibo    | www.weibo.com    |    20 | CN      |<br>|  2 | taobao   | www.taobao.com   |    13 | CN      |<br>|  1 | Google   | www.google.com   |     1 | USA     |<br>+----+----------+------------------+-------+---------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="按多个列排序"><a href="#按多个列排序" class="headerlink" title="按多个列排序"></a>按多个列排序</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from websites<br>    -&gt; order by name ,id;<br>+----+----------+------------------+-------+---------+<br>| id | name     | url              | alexa | country |<br>+----+----------+------------------+-------+---------+<br>|  4 | facebook | www.facebook.com |     3 | USA     |<br>|  1 | Google   | www.google.com   |     1 | USA     |<br>|  5 | JD       | www.JD.com       |    10 | CN      |<br>|  2 | taobao   | www.taobao.com   |    13 | CN      |<br>|  3 | weibo    | www.weibo.com    |    20 | CN      |<br>+----+----------+------------------+-------+---------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="WHERE-过滤数据"><a href="#WHERE-过滤数据" class="headerlink" title="WHERE 过滤数据"></a>WHERE 过滤数据</h3><blockquote><p>我们知道从mysql表中使用**sql  select **语句来读取数据</p></blockquote><blockquote><p>如需有条件地从表中选取数据，可将<strong>where</strong>子句添加到<strong>select</strong> 语句中</p></blockquote><p>以下是利用<strong>select where</strong> 从数据表中读取数据的通用语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT field1, field2,...fieldN FROM table_name1, table_name2...<br>[WHERE condition1 [AND [OR]] condition2.....<br></code></pre></td></tr></table></figure><ul><li><blockquote><p>查询语句中你可以使用一个或者多个表，表之间使用逗号**,** 分割，并使用WHERE语句来设定查询条件。</p></blockquote></li><li><blockquote><p>你可以在 WHERE 子句中指定任何条件。</p></blockquote></li><li><blockquote><p>你可以使用 AND 或者 OR 指定一个或多个条件。</p></blockquote></li><li><blockquote><p>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</p></blockquote></li><li><blockquote><p>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</p></blockquote></li></ul><h5 id="WHERE-可使用操作符"><a href="#WHERE-可使用操作符" class="headerlink" title="WHERE 可使用操作符"></a>WHERE 可使用操作符</h5><blockquote><p>以下为操作符列表，可用于 WHERE 子句中下表中实例假定 A 为 10, B 为 20</p></blockquote><table><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>等号，检测两个值是否相等，如果相等返回true</td><td>（ A = B ）返回false</td></tr><tr><td>&lt;&gt; , !=</td><td>不等于，检测两个值是否相等，如果不相等返回true</td><td>（ A != B )  返回true</td></tr><tr><td>&gt;</td><td>大于号，检测左边的值是否大于右边的值如果左边的值大于右边的值返回true</td><td>（ A &gt; B ) 返回false</td></tr><tr><td>&gt;=</td><td>大于等于号，检测左边的值是够大于获等于右边的值，如果左边的值大于或等于右边的值返回true</td><td>（ A &gt;= B ) 返回true</td></tr><tr><td>&lt;</td><td>小于号，检测左边的值是否小于右边的值如果小于返回true</td><td>（ A &lt; B ) 返回ture</td></tr><tr><td>&lt;=</td><td>小于等于号，检测左边的是否小于或者等于右边的值如果成立返回ture</td><td>（ A &lt;= B ) 返回ture</td></tr><tr><td>between</td><td>在指定的两个值之间 A–B之间</td><td>返回 A–B 之间的所有数据</td></tr></tbody></table><h5 id="检查单个值"><a href="#检查单个值" class="headerlink" title="检查单个值"></a>检查单个值</h5><blockquote><p>mysql执行匹配时不区分大小写</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from websites<br>    -&gt; where id &#x3D; 4;&#x2F;&#x2F;返回 id 列等于 4 数据<br>+----+----------+------------------+-------+---------+<br>| id | name     | url              | alexa | country |<br>+----+----------+------------------+-------+---------+<br>|  4 | facebook | www.facebook.com |     3 | USA     |<br>+----+----------+------------------+-------+---------+<br>1 row in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="空值检查（NULL）"><a href="#空值检查（NULL）" class="headerlink" title="空值检查（NULL）"></a>空值检查（NULL）</h5><blockquote><p>NULL  无值 ，他与字段包含0、空字符串仅仅包含空格不同</p><p>SELECT语句有一个特殊的WHERE子句，可用来检查具有NULL值的列。 这个WHERE子句就是IS NULL子句。：</p></blockquote><h5 id="使用binary区分检索大小写"><a href="#使用binary区分检索大小写" class="headerlink" title="使用binary区分检索大小写"></a>使用binary区分检索大小写</h5><blockquote><p><strong>MySQL 的 **WHERE子句的字符串比较是不区分大小写的。 你可以使用 **BINARY</strong> 关键字来设定 WHERE 子句的字符串比较是区分大小写的.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">BINARY 关键字<br>mysql&gt; select * from root where binary address &#x3D; &#39;runoob.com&#39;;<br>Empty set (0.00 sec)<br><br>mysql&gt; select * from root where binary address &#x3D; &#39;RUNOOB.COM&#39; ;<br>+----+---------------+------------+------------+<br>| id | name          | address    | nowtime    |<br>+----+---------------+------------+------------+<br>|  3 | JAVA 教程     | RUNOOB.COM | 2020-05-01 |<br>|  4 | 学习 Python   | RUNOOB.COM | 2020-05-01 |<br>+----+---------------+------------+------------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><blockquote><p>实例中使用了 <strong>BINARY</strong> 关键字，是区分大小写的，所以 <strong>address=’runoob.com’</strong> 的查询条件是没有数据的.</p></blockquote><hr><h3 id="AND-amp-OR-操作符"><a href="#AND-amp-OR-操作符" class="headerlink" title="AND &amp; OR 操作符"></a>AND &amp; OR 操作符</h3><blockquote><p>AND &amp; OR 运算符用于基于一个以上的条件对记录进行过滤。</p></blockquote><blockquote><p>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。</p></blockquote><blockquote><p>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。</p></blockquote><h5 id="AND"><a href="#AND" class="headerlink" title="AND"></a><strong>AND</strong></h5><blockquote><p>添加检索的附加条件 and（和）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from websites<br>    -&gt; where country &#x3D; &#39;USA&#39;<br>    -&gt; and alexa &lt; 10 ;<br>+----+----------+------------------+-------+---------+<br>| id | name     | url              | alexa | country |<br>+----+----------+------------------+-------+---------+<br>|  1 | Google   | www.google.com   |     1 | USA     |<br>|  4 | facebook | www.facebook.com |     3 | USA     |<br>+----+----------+------------------+-------+---------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="OR"><a href="#OR" class="headerlink" title="OR"></a><strong>OR</strong></h5><blockquote><p>添加检索的附加条件or（或者）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from websites<br>    -&gt; where country &#x3D; &#39;CN&#39;<br>    -&gt; or country &#x3D; &#39;USA&#39; ;<br>+----+----------+------------------+-------+---------+<br>| id | name     | url              | alexa | country |<br>+----+----------+------------------+-------+---------+<br>|  1 | Google   | www.google.com   |     1 | USA     |<br>|  2 | taobao   | www.taobao.com   |    13 | CN      |<br>|  3 | weibo    | www.weibo.com    |    20 | CN      |<br>|  4 | facebook | www.facebook.com |     3 | USA     |<br>|  5 | JD       | www.JD.com       |    10 | CN      |<br>+----+----------+------------------+-------+---------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="计算次序-AND-amp-OR"><a href="#计算次序-AND-amp-OR" class="headerlink" title="计算次序 AND&amp;OR"></a>计算次序 AND&amp;OR</h5><blockquote><p>当and or操作符在一个where语句中使用时就要考虑到计算次序的问题</p><p>and 要比or优先  所以先进行and操作符工作 在进行or操作符工作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from schools<br>    -&gt; where type &#x3D; 985 or type &#x3D; 211 and address &#x3D; &#39;Beijing&#39; ;<br>+----+--------------------+------+---------+------+<br>| id | name               | type | address | area |<br>+----+--------------------+------+---------+------+<br>|  1 | 北京大学          | 985  | beijing | 7000 |<br>|  2 | 清华大学           | 985  | Beijing | 5886 |<br>|  3 | 北京科技大学       | 211  | Beijing | 1200 |<br>|  5 | 电子科技大学       | 985  | Chengdu | 5000 |<br>|  6 | 武汉大学           | 985  | Wuhan   | 5195 |<br>+----+--------------------+------+---------+------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><p>因为计算优先级的原因所以要进行综合检索的话要用（） 分隔开附加条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from websites<br>    -&gt; where alexa &gt; 1<br>    -&gt; and ( country &#x3D; &#39;CN&#39; or country &#x3D; &#39;USA&#39; );<br>+----+----------+------------------+-------+---------+<br>| id | name     | url              | alexa | country |<br>+----+----------+------------------+-------+---------+<br>|  2 | taobao   | www.taobao.com   |    13 | CN      |<br>|  3 | weibo    | www.weibo.com    |    20 | CN      |<br>|  4 | facebook | www.facebook.com |     3 | USA     |<br>|  5 | JD       | www.JD.com       |    10 | CN      |<br>+----+----------+------------------+-------+---------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="IN-操作符"><a href="#IN-操作符" class="headerlink" title="IN 操作符"></a>IN 操作符</h5><blockquote><p>圆括号在WHERE子句中还有另外一种用法。IN操作符用来指定条件范 围，范围中的每个条件都可以进行匹配。IN取合法值的由逗号分隔的清 单，全都括在圆括号中。</p><p>WHERE子句中用来指定要匹配值的清单的关键字，功能与OR 相当。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from schools<br>    -&gt; where address in (&#39;wuhan&#39; , &#39;Beijing&#39;);<br>+----+--------------------+------+---------+------+<br>| id | name               | type | address | area |<br>+----+--------------------+------+---------+------+<br>|  1 |  北京大学          | 985  | beijing | 7000 |<br>|  2 | 清华大学           | 985  | Beijing | 5886 |<br>|  3 | 北京科技大学       | 211  | Beijing | 1200 |<br>|  6 | 武汉大学           | 985  | Wuhan   | 5195 |<br>+----+--------------------+------+---------+------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="NOT-操作符"><a href="#NOT-操作符" class="headerlink" title="NOT 操作符"></a>NOT 操作符</h5><blockquote><p>WHERE子句中的NOT操作符有且只有一个功能，那就是否定它之后所 跟的任何条件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from schools<br>    -&gt; where address not in(&#39;wuhan&#39;,&#39;Beijing&#39;);<br>+----+--------------------+------+-----------+------+<br>| id | name               | type | address   | area |<br>+----+--------------------+------+-----------+------+<br>|  4 | 郑州大学           | 211  | Zhengzhou | 5700 |<br>|  5 | 电子科技大学       | 985  | Chengdu   | 5000 |<br>+----+--------------------+------+-----------+------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><blockquote><p>为什么使用NOT？对于简单的WHERE子句，使用NOT确实没有什么优 势。但在更复杂的子句中，NOT是非常有用的。例如，在与IN操作符联合 使用时，NOT使找出与条件列表不匹配的行非常简单。</p></blockquote><hr><h3 id="MYSQL-UPDATE"><a href="#MYSQL-UPDATE" class="headerlink" title="MYSQL UPDATE"></a>MYSQL UPDATE</h3><blockquote><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL <strong>UPDATE</strong> 命令来操作。</p></blockquote><p>以下是 <strong>UPDATE</strong> 命令修改 MySQL 数据表数据的通用 SQL 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE table_name<br>SET column1&#x3D;value1,column2&#x3D;value2,...<br>WHERE some_column&#x3D;some_value;<br></code></pre></td></tr></table></figure><ul><li><blockquote><p>你可以同时更新一个或多个字段。</p></blockquote></li><li><blockquote><p>你可以在 WHERE 子句中指定任何条件。</p></blockquote></li><li><blockquote><p>你可以在一个单独表中同时更新数据。</p></blockquote></li></ul><p><strong>SQL UPDATE 语句：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; update root set name &#x3D; &#39;学习 C++&#39; where id &#x3D; 3 ;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select * from root where id &#x3D; 3 ;<br>+----+------------+------------+------------+<br>| id | name       | address    | nowtime    |<br>+----+------------+------------+------------+<br>|  3 | 学习 C++   | RUNOOB.COM | 2020-05-01 |<br>+----+------------+------------+------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><p><b>警告</b>：在更新记录时要格外小心！在上面的实例中，如果我们省略了 WHERE 子句，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE Websites<br>SET alexa&#x3D;&#39;5000&#39;, country&#x3D;&#39;USA&#39;<br></code></pre></td></tr></table></figure><blockquote><p>执行以上代码会将 Websites 表中所有数据的 alexa 改为 5000，country 改为 USA。执行没有 WHERE 子句的 UPDATE 要慎重，再慎重。</p></blockquote><hr><h3 id="MYSQL-DELETE"><a href="#MYSQL-DELETE" class="headerlink" title="MYSQL DELETE"></a>MYSQL DELETE</h3><blockquote><p>你可以使用 SQL 的 <strong>DELETE FROM</strong> 命令来删除 MySQL 数据表中的记录。</p></blockquote><p>以下是 SQL <strong>DELETE</strong> 语句从 MySQL 数据表中删除数据的通用语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM table_name<br>WHERE some_column&#x3D;some_value;<br></code></pre></td></tr></table></figure><ul><li><blockquote><p>如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。</p></blockquote></li><li><blockquote><p>你可以在 WHERE 子句中指定任何条件</p></blockquote></li><li><blockquote><p>您可以在单个表中一次性删除记录。</p></blockquote></li></ul><p><strong>DELETE 语句：</strong></p><blockquote><p>从命令行中删除数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; use rootme;<br>Database changed<br>mysql&gt; delete from root where id &#x3D; 3 ;<br>Query OK, 1 row affected (0.23 sec)<br></code></pre></td></tr></table></figure><p><strong>删除所有数据</strong></p><blockquote><p>您可以在不删除表的情况下，删除表中所有的行。这意味着表结构、属性、索引将保持不变：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM table_name;<br><br>OR<br><br>DELETE * FROM table_name;<br></code></pre></td></tr></table></figure><blockquote><p>注释：在删除记录时要格外小心！因为您不能重来！</p></blockquote><hr><h3 id="LIKE-通配符过滤"><a href="#LIKE-通配符过滤" class="headerlink" title="LIKE 通配符过滤"></a>LIKE 通配符过滤</h3><blockquote><p>SQL<strong>LIKE</strong> 子句中使用百分号 *<em>%<strong>字符来表示任意字符，类似于UNIX或正则表达式中的星号 **</strong></em>。如果没有使用百分号 <strong>%</strong>, LIKE 子句与等号 <strong>=</strong> 的效果是一样的    (我自己的理解相当于模糊搜索的意思)</p></blockquote><p>以下是 <strong>SQL SELECT **语句使用 **LIKE</strong> 子句从数据表中读取数据的通用语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT column_name(s)<br>FROM table_name<br>WHERE column_name LIKE pattern;<br></code></pre></td></tr></table></figure><ul><li><blockquote><p>你可以在 WHERE 子句中指定任何条件。</p></blockquote></li><li><blockquote><p>你可以在 WHERE 子句中使用LIKE子句。</p></blockquote></li><li><blockquote><p>你可以使用LIKE子句代替等号 **=**。</p></blockquote></li><li><blockquote><p>LIKE 通常与 <strong>%</strong> 一同使用，类似于一个元字符的搜索。</p></blockquote></li><li><blockquote><p>你可以使用 AND 或者 OR 指定一个或多个条件。</p></blockquote></li><li><blockquote><p>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。</p></blockquote></li></ul><h5 id="替代字符检索"><a href="#替代字符检索" class="headerlink" title="% 替代字符检索"></a><strong>% 替代字符检索</strong></h5><blockquote><p>以下是我们将<strong>root</strong>表中获取的<strong>address</strong>字段中以<strong>com</strong>结尾的所有数据记录：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; use rootme;<br>Database changed<br>mysql&gt; select * from root where address like &#39;%COM&#39; ;<br>+----+---------------+------------+------------+<br>| id | name          | address    | nowtime    |<br>+----+---------------+------------+------------+<br>|  3 | 学习 C++      | RUNOOB.COM | 2020-05-01 |<br>|  4 | 学习 Python   | RUNOOB.COM | 2020-05-01 |<br>+----+---------------+------------+------------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="like-可用通配符"><a href="#like-可用通配符" class="headerlink" title="like 可用通配符"></a><strong>like 可用通配符</strong></h5><blockquote><p>通配符可用于替代字符串中的任何其他字符。在 SQL 中，通配符与 SQL LIKE 操作符一起使用。SQL 通配符用于搜索表中的数据。</p></blockquote><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>%</td><td>替代0个或多个字符</td></tr><tr><td>_</td><td>替代一个字符</td></tr><tr><td>[charlist]</td><td>字符列中任何单一字符</td></tr><tr><td>[^charlist]  or [!charlist]</td><td>不再字符列中的任何单一字符</td></tr></tbody></table><hr><p>·</p><h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><blockquote><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p></blockquote><h5 id="UNION-操作符语法："><a href="#UNION-操作符语法：" class="headerlink" title="UNION 操作符语法："></a>UNION 操作符语法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT expression1, expression2, ... expression_n<br>FROM tables<br>[WHERE conditions]<br>UNION [ALL | DISTINCT]<br>SELECT expression1, expression2, ... expression_n<br>FROM tables<br>[WHERE conditions];<br></code></pre></td></tr></table></figure><blockquote><blockquote><p><strong>参数</strong></p></blockquote></blockquote><ul><li><blockquote><p><strong>expression1, expression2, … expression_n</strong>: 要检索的列。</p></blockquote></li><li><blockquote><p><strong>tables:</strong> 要检索的数据表。</p></blockquote></li><li><blockquote><p><strong>WHERE conditions:</strong> 可选， 检索条件。</p></blockquote></li><li><blockquote><p><strong>DISTINCT:</strong> 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</p></blockquote></li><li><blockquote><p><strong>ALL:</strong> 可选，返回所有结果集，包含重复数据。</p></blockquote></li><li><blockquote><p><strong>UNION 语句</strong>：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据）</p></blockquote></li><li><blockquote><p><strong>UNION ALL 语句</strong>：用于将不同表中相同列中查询的数据展示出来；（包括重复数据）</p></blockquote></li></ul><h5 id="演示数据库"><a href="#演示数据库" class="headerlink" title="演示数据库"></a><strong>演示数据库</strong></h5><blockquote><p>在本演示中我们将使用<strong>rootme</strong>数据库</p></blockquote><blockquote><p>下面选自<strong>websites</strong>表的数据：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from websites ;<br>+----+----------+------------------+-------+--------+<br>| id | name     | url              | alexa |country |<br>+----+----------+------------------+-------+--------+<br>|  1 | Google   | www.google.com   |     1 | USA    |<br>|  2 | taobao   | www.taobao.com   |    13 | CN     |<br>|  3 | weibo    | www.weibo.com    |    20 | CN     |<br>|  4 | facebook | www.facebook.com |     3 | USA    |<br>|  5 | JD       | www.JD.com       |    10 | CN     |<br>+----+----------+------------------+-------+--------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><p>下面是<strong>apps</strong>表的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from apps;<br>+----+----------+----------------+--------+<br>| id | app_name | url            |country |<br>+----+----------+----------------+--------+<br>|  1 | QQ       | im.qq.com      | CN     |<br>|  2 | weibo    | www.weibo.com  | CN     |<br>|  3 | weixin   | www.weixin.com | CN     |<br>+----+----------+----------------+--------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="UNION-1"><a href="#UNION-1" class="headerlink" title="UNION"></a><strong>UNION</strong></h5><blockquote><p>下面的 SQL 语句从 “Websites” 和 “apps” 表中选取所有<strong>不同的</strong>country（只有不同的值）：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select country from websites<br>    -&gt; union<br>    -&gt; select country from apps<br>    -&gt; order by country ;<br>+--------+<br>|country |<br>+--------+<br>| CN     |<br>| USA    |<br>+--------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><blockquote><p><i>**注释:**UNION 不能用于列出两个表中所有的country。如果一些网站和APP</i></p></blockquote><h5 id="UNION-ALL"><a href="#UNION-ALL" class="headerlink" title="UNION ALL"></a><strong>UNION ALL</strong></h5><blockquote><p>下面的 SQL 语句使用 UNION ALL 从 “Websites” 和 “apps” 表中选取<strong>所有的</strong>country（也有重复的值）：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select country from websites<br>    -&gt; union all<br>    -&gt; select country from apps<br>    -&gt; order by country ;<br>+--------+<br>|country |<br>+--------+<br>| CN     |<br>| CN     |<br>| CN     |<br>| CN     |<br>| CN     |<br>| CN     |<br>| USA    |<br>| USA    |<br>+--------+<br>8 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="带有WHERE的-UNION-ALL"><a href="#带有WHERE的-UNION-ALL" class="headerlink" title="带有WHERE的 UNION ALL"></a>带有<strong>WHERE</strong>的 <strong>UNION ALL</strong></h5><blockquote><p>下面的 SQL 语句使用 UNION ALL 从 “Websites” 和 “apps” 表中选取<strong>所有的</strong>中国(CN)的数据（也有重复的值）：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select country ,name from websites<br>    -&gt; where country &#x3D; &#39;CN&#39;<br>    -&gt; union all<br>    -&gt; select country ,name from apps<br>    -&gt; where country &#x3D; &#39;CN&#39;<br>    -&gt; order by country;<br>+---------+--------+<br>| country | name   |<br>+---------+--------+<br>| CN      | taobao |<br>| CN      | weibo  |<br>| CN      | JD     |<br>| CN      | QQ     |<br>| CN      | weibo  |<br>| CN      | weixin |<br>+---------+--------+<br>6 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="正则表达式-REGEXP"><a href="#正则表达式-REGEXP" class="headerlink" title="正则表达式(REGEXP)"></a>正则表达式(REGEXP)</h3><blockquote><p>正则表达式是一组由字母和符号组成的特殊文本, 它可以用来从文本中找出满足你想要的格式的句子.</p></blockquote><blockquote><p>一个正则表达式是在一个主体字符串中从左到右匹配字符串时的一种样式. “Regular expression”这个词比较拗口, 我们常使用缩写的术语”regex”或”regexp”. 正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等.</p></blockquote><blockquote><p>想象你正在写一个应用, 然后你想设定一个用户命名的规则, 让用户名包含字符,数字,下划线和连字符,以及限制字符的个数,好让名字看起来没那么丑. </p></blockquote><p><strong>我们使用以下正则表达式来验证一个用户名:</strong></p><p>![image-20200504151108460](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504151108460.png)</p><h5 id="基本匹配"><a href="#基本匹配" class="headerlink" title="基本匹配"></a><strong>基本匹配</strong></h5><p>正则表达式其实就是在执行搜索时的格式, 它由一些字母和数字组合而成. 例如: 一个正则表达式 <code>the</code>, 它表示一个规则: 由字母<code>t</code>开始,接着是<code>h</code>,再接着是<code>e</code>.</p><p>![image-20200504155636791](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504155636791.png)      </p><p>正则表达式<code>123</code>匹配字符串<code>123</code>. 它逐个字符的与输入的正则表达式做比较.</p><p>正则表达式是大小写敏感的, 所以<code>The</code>不会匹配<code>the</code>.</p><p> ![image-20200504155708420](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504155708420.png)</p><p>简单匹配演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"><br>mysql&gt; select * from websites<br>    -&gt; where name regexp &#39;Goo&#39;;<br>+----+--------+----------------+-------+---------+<br>| id | name   | url            | alexa | country |<br>+----+--------+----------------+-------+---------+<br>|  1 | Google | www.google.com |     1 | USA     |<br>+----+--------+----------------+-------+---------+<br>1 row in set (0.00 sec)<br><br></code></pre></td></tr></table></figure><h5 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a><strong>元字符</strong></h5><blockquote><p>正则表达式主要依赖于元字符. 元字符不代表他们本身的字面意思, 他们都有特殊的含义. 一些元字符写在方括号中的时候有一些特殊的意思. 以下是一些元字符的介绍:</p></blockquote><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>句号匹配但个字符除了换行符</td></tr><tr><td>[ ]</td><td>字符种类  匹配方括号内的任意字符</td></tr><tr><td>[^ ]</td><td>否定的字符种类，匹配除了方括号内的任意字符</td></tr><tr><td>*</td><td>匹配 &gt;= 个重复在 * 之间的字符</td></tr><tr><td>+</td><td>匹配  &gt;= 1 个重复在 + 号之间的字符</td></tr><tr><td>?</td><td>标记 ？ 之前的字符为可选</td></tr><tr><td>{n,m}</td><td>匹配 num 个中括号之前的字符（n &lt;= num &lt;= m)</td></tr><tr><td>{xyz}</td><td>字符集，匹配与xyz完全相等字符串（大小写很敏感  要区分好）</td></tr><tr><td>|</td><td>’ 或 ‘ 运算符匹配符号之间前或后的字符</td></tr><tr><td>\</td><td>转义字符 用于匹配一些保留的字符<code>[ ] ( ) &#123; &#125; . * + ? ^ $ \</code></td></tr><tr><td>^</td><td>从开始行开始匹配</td></tr><tr><td>&amp;</td><td>从末端开始匹配</td></tr></tbody></table><h5 id="点运算符"><a href="#点运算符" class="headerlink" title="点运算符 ."></a><strong>点运算符 <font color = red><code>.</code></font></strong></h5><p><code>.</code>是元字符中最简单的例子. <code>.</code>匹配任意单个字符, 但不匹配换行符. 例如, 表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串.</p><p> ![image-20200504155745504](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504155745504.png)</p><p>简单匹配演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from root<br>    -&gt; where name regexp &#39;.PHP&#39; ;<br>+----+------------+--------------+------------+<br>| id | name       | address      | nowtime    |<br>+----+------------+--------------+------------+<br>|  1 | 学习 PHP   | 菜鸟教程     | 2020-05-01 |<br>+----+------------+--------------+------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="字符集"><a href="#字符集" class="headerlink" title="字符集 [ ]"></a><strong>字符集 [ ]</strong></h5><p>字符集也叫做字符类. 方括号用来指定一个字符集. 在方括号中使用连字符来指定字符集的范围. 在方括号中的字符集不关心顺序. 例如, 表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>.</p><p> ![image-20200504160603979](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504160603979.png)</p><p>方括号的句号就表示句号. 表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p><p> ![image-20200504160641950](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504160641950.png)</p><p>简单检索演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select name ,url from  websites<br>    -&gt; where url regexp &#39;[.]co&#39;;<br>+----------+------------------+<br>| name     | url              |<br>+----------+------------------+<br>| Google   | www.google.com   |<br>| taobao   | www.taobao.com   |<br>| weibo    | www.weibo.com    |<br>| facebook | www.facebook.com |<br>| JD       | www.JD.com       |<br>+----------+------------------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="否定字符集"><a href="#否定字符集" class="headerlink" title="否定字符集[ ^ ]"></a><strong>否定字符集[ ^ ]</strong></h5><p>一般来说 <code>^</code> 表示一个字符串的开头, 但它用在一个方括号的开头的时候, 它表示这个字符集是否定的. 例如, 表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符.</p><p> ![image-20200504202133675](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504202133675.png)</p><p>简单检索演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from apps ;<br>+----+--------+----------------+---------+<br>| id | name   | url            | country |<br>+----+--------+----------------+---------+<br>|  1 | QQ     | im.qq.com      | CN      |<br>|  2 | weibo  | www.weibo.com  | CN      |<br>|  3 | weixin | www.weixin.com | CN      |<br>+----+--------+----------------+---------+<br>3 rows in set (0.01 sec)<br><br>mysql&gt; select * from apps<br>    -&gt; where name regexp &#39;wei[^xin]&#39;;<br>+----+--------+---------------+---------+<br>| id | name   | url           | country |<br>+----+--------+---------------+---------+<br>|  2 | weibo  | www.weibo.com | CN      |<br>+----+--------+---------------+---------+<br>1 row in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="重复次数"><a href="#重复次数" class="headerlink" title="重复次数"></a>重复次数</h5><p>**<code>*</code> 号 **</p><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次. 例如, 表达式 <code>a*</code> 匹配以0或更多个a开头的字符, 因为有0个这个条件, 其实也就匹配了所有的字符. 表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串.</p><p> ![image-20200504203357614](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504203357614.png)</p><p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>. <code>*</code>和表示匹配空格的符号<code>\s</code>连起来用, 如表达式<code>\s*cat\s*</code>匹配0或更多个空格开头和0或更多个空格结尾的cat字符串.</p><p> ![image-20200504203911726](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504203911726.png)</p><p><strong><code>+</code> 号</strong></p><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次个字符. 例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾,中间跟着任意个字符的字符串.</p><p> ![image-20200504204014305](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504204014305.png)</p><p><strong><code>?</code> 号</strong></p><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选, 即出现 0 或 1 次. 例如, 表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code></p><p> ![image-20200504204056836](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504204056836.png)</p><p> ![image-20200504204147595](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504204147595.png)</p><h5 id="号"><a href="#号" class="headerlink" title="{}号"></a><strong><code>&#123;&#125;</code>号</strong></h5><p>在正则表达式中 <code>&#123;&#125;</code> 是一个量词, 常用来一个或一组字符可以重复出现的次数. 例如, 表达式 <code>[0-9]&#123;2,3&#125;</code> 匹配 2～3 位 0～9 的数字.</p><p> ![image-20200504204247694](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504204247694.png)</p><p>我们可以省略第二个参数. 例如, <code>[0-9]&#123;2,&#125;</code> 匹配至少两位 0~9 的数字.</p><p>如果逗号也省略掉则表示重复固定的次数. 例如, <code>[0-9]&#123;3&#125;</code> 匹配3位数字</p><p> ![image-20200504204329859](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504204329859.png)</p><p> ![image-20200504204339945](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504204339945.png)</p><h5 id="特征标群"><a href="#特征标群" class="headerlink" title="(...)特征标群"></a><strong><code>(...)</code>特征标群</strong></h5><p>特征标群是一组写在 <code>(...)</code> 中的子模式. 例如之前说的 <code>&#123;&#125;</code> 是用来表示前面一个字符出现指定次数. 但如果在 <code>&#123;&#125;</code> 前加入特征标群则表示整个标群内的字符重复 N 次. 例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>.*</p><p>*我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或. 例如, <code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p><p> ![image-20200504204646157](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504204646157.png)</p><h5 id="或运算"><a href="#或运算" class="headerlink" title="| 或运算"></a><strong><code>|</code> 或运算</strong></h5><p>或运算符就表示或, 用作判断条件.</p><p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>.</p><p> ![image-20200504205650455](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504205650455.png)</p><h5 id="转码特殊字符"><a href="#转码特殊字符" class="headerlink" title="转码特殊字符"></a><strong>转码特殊字符</strong></h5><p>反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符. 用于指定 <code>&#123; &#125; [ ] / \ + * . $ ^ | ?</code> 这些特殊字符. 如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\</code>&lt;</p><p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的. 如果想要匹配句子中的 <code>.</code> 则要写成 <code>\.</code> 以下这个例子 <code>\.?</code>是选择性匹配<code>.</code></p><p> ![image-20200504205903859](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504205903859.png)</p><h5 id="锚点"><a href="#锚点" class="headerlink" title="锚点^ $"></a><strong>锚点<code>^</code> <code>$</code></strong></h5><p>在正则表达式中，想要匹配开头的或者结尾的字符串就要使用到锚点 <code>^</code> 指定开头<code>$</code>指定结尾</p><p><strong><code>^</code></strong></p><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头.</p><p>例如, 在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>. 但如果使用 <code>^b</code> 将匹配不到任何结果. 因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头.</p><p>例如, <code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串.</p><p> ![image-20200504210511980](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504210511980.png)</p><p> ![image-20200504210527180](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504210527180.png)</p><p><strong><code>$</code> 号</strong></p><p>同理于 <code>^</code> 号, <code>$</code> 号用来匹配字符是否是最后一个.</p><p>例如, <code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串.</p><p> ![image-20200504211527714](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504211527714.png)</p><p> ![image-20200504211540483](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504211540483.png)</p><h5 id="简写字符集"><a href="#简写字符集" class="headerlink" title="简写字符集"></a><strong>简写字符集</strong></h5><table><thead><tr><th>简写</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>除去换行符外的所有字符</td></tr><tr><td>\w</td><td>匹配所有字母数字，等同于：<code>[a-zA-Z0-9_]</code></td></tr><tr><td>\W</td><td>匹配所有非字母数字，即符号，等同于 ：<code>[ ^ \w]</code></td></tr><tr><td>\d</td><td>匹配数字：<code>[0-9]</code></td></tr><tr><td>\D</td><td>匹配非数字：<code>[ ^ \d]</code></td></tr><tr><td>\s</td><td>匹配所有空格字符, 等同于: <code> [ \t \n \f \r \p &#123;Z&#125; ]</code></td></tr><tr><td>\S</td><td>匹配所有非空格字符: <code>[^\s]</code></td></tr><tr><td>\f</td><td>匹配一个换页符</td></tr><tr><td>\n</td><td>匹配一个换行符</td></tr><tr><td>\r</td><td>匹配一个回车符</td></tr><tr><td>\t</td><td>匹配一个制表符</td></tr><tr><td>\v</td><td>匹配一个垂直制表符</td></tr><tr><td>\p</td><td>匹配 CR/LF (等同于 <code>\r\n</code>)，用来匹配 DOS 行终止符</td></tr></tbody></table><h5 id="前后关联约束"><a href="#前后关联约束" class="headerlink" title="前后关联约束"></a>前后关联约束</h5><p><strong>?=…` 前置约束(存在)</strong></p><p><code>?=...</code> 前置约束(存在), 表示第一部分表达式必须跟在 <code>?=...</code>定义的表达式之后.</p><p>返回结果只满足第一部分表达式. 定义一个前置约束(存在)要使用 <code>()</code>. 在括号内部使用一个问号和等号: <code>(?=...)</code>.</p><p>前置约束的内容写在括号中的等号后面. 例如, 表达式 <code>(T|t)he(?=\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>, 在括号中我们又定义了前置约束(存在) <code>(?=\sfat)</code> ,即 <code>The</code> 和 <code>the</code> 后面</p><p> ![image-20200504215141378](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504215141378.png)</p><p><strong><code>?&lt;= ...</code> 后置约束-存在</strong></p><p>后置约束-存在 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果, 筛选条件为 其前跟随着定义的格式. 例如, 表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>, 且其前跟着 <code>The</code> 或 <code>the</code>.</p><p> ![image-20200504215301345](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504215301345.png)</p><p><strong><code>?</code> 后置约束-排除</strong></p><p>后置约束-排除 记作 <code>(? 用于筛选所有匹配结果, 筛选条件为 其前不跟着定义的格式. 例如, 表达式 </code>(? 匹配 <code>cat</code>, 且其前不跟着 <code>The</code> 或 <code>the</code>.</p><h5 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h5><table><thead><tr><th>标志</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>忽略大小写</td></tr><tr><td>g</td><td>全局搜索</td></tr><tr><td>m</td><td>多行的: 锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始.</td></tr></tbody></table><p><strong>忽略大小写 (Case Insensitive)</strong></p><p>修饰语 <code>i</code> 用于忽略大小写. 例如, 表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>, 在后面的 <code>i</code> 将其条件修改为忽略大小写, 则变成搜索 <code>the</code> 和 <code>The</code>, <code>g</code> 表示全局搜索.</p><p> ![image-20200504215640289](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504215640289.png)</p><p> ![image-20200504215650541](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504215650541.png)</p><p><strong>全局搜索 (Global search)</strong></p><p>修饰符 <code>g</code> 常用语执行一个全局搜索匹配, 即(不仅仅返回第一个匹配的, 而是返回全部). 例如, 表达式 <code>/.(at)/g</code> 表示搜索 任意字符(除了换行) + <code>at</code>, 并返回全部结果.</p><p> ![image-20200504215729995](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504215729995.png)</p><p> ![image-20200504215740333](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504215740333.png)</p><p><strong>多行修饰符 (Multiline)</strong></p><p>多行修饰符 <code>m</code> 常用语执行一个多行匹配.</p><p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾. 但我们如果想要它在每行的开头和结尾生效, 我们需要用到多行修饰符 <code>m</code>.</p><p>例如, 表达式 <code>/at(.)?$/gm</code> 表示在待检测字符串每行的末尾搜索 <code>at</code>后跟一个或多个 <code>.</code> 的字符串, 并返回全部结果.</p><p> ![image-20200504215822817](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504215822817.png)</p><p> ![image-20200504215834224](/Users/haohongxin/Library/Application Support/typora-user-images/image-20200504215834224.png)</p><hr><h3 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h3><h5 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h5><blockquote><p>字段（field） 基本上与列（column）的意思相同，经常互换使 用，不过数据库列一般称为列，而术语字段通常用在计算字段的 连接上。</p></blockquote><blockquote><p>拼接（concatenate） 将值联结到一起构成单个值。</p><p>解决办法是把两个列拼接起来。在MySQL的SELECT语句中，可使用 Concat()函数来拼接两个列。</p></blockquote><p><strong>Concat</strong></p><blockquote><p>Concat() 拼接串， 即把多个串连接起来形成一个较长的串。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select concat(name ,&#39;(&#39;,country,&#39;)&#39;)<br>    -&gt; from websites<br>    -&gt; order by name ;<br>+-------------------------------+<br>| concat(name ,&#39;(&#39;,country,&#39;)&#39;) |<br>+-------------------------------+<br>| facebook(USA)                 |<br>| Google(USA)                   |<br>| JD(CN)                        |<br>| taobao(CN)                    |<br>| weibo(CN)                     |<br>+-------------------------------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><p><strong>RTrim（ ） &amp; LTRim（ ）</strong></p><blockquote><p>RTrim()函数去掉值右边的所有空格。通过使用RTrim()，各个 列都进行了整理。相反LTrim去掉左边的空格   以及Trim（）去掉左右两边的空格</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select  concat(rtrim(name) ,&#39;(&#39;,rtrim(country),&#39;)&#39;)<br>from websites <br>order by name ;<br><br>mysql&gt; select  concat(rtrim(name) ,&#39;(&#39;,rtrim(country),&#39;)&#39;)<br>    -&gt; from websites<br>    -&gt; order by name ;<br>+---------------------------------------------+<br>| concat(rtrim(name) ,&#39;(&#39;,rtrim(country),&#39;)&#39;) |<br>+---------------------------------------------+<br>| facebook(USA)                               |<br>| Google(USA)                                 |<br>| JD(CN)                                      |<br>| taobao(CN)                                  |<br>| weibo(CN)                                   |<br>+---------------------------------------------+<br>5 rows in set (0.01 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><p><strong>使用别名</strong></p><blockquote><p>从上面的concat拼接可以看出但是新的计算返回的列名 实际上没有名字他只是一个值为了解决这个问题 sql支持列别名 别名（alias）是一个字段或值的替换名。别名用AS关键字赋予</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select concat(name ,&#39;(&#39;,country,&#39;)&#39;)  as  app_name<br>    -&gt; from websites<br>    -&gt; order by name;<br>+---------------+<br>| app_name      |<br>+---------------+<br>| facebook(USA) |<br>| Google(USA)   |<br>| JD(CN)        |<br>| taobao(CN)    |<br>| weibo(CN)     |<br>+---------------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><blockquote><p>分析上面的语言可以看出之前的拼接语句被别名app_name 代替</p></blockquote><h5 id="执行算术计算"><a href="#执行算术计算" class="headerlink" title="执行算术计算"></a>执行算术计算</h5><blockquote><p>计算字段的另一常见用途是对检索出的数据进行算术计算。</p></blockquote><p><strong>算术操作符</strong></p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create table jisuan(<br>    -&gt; number_1 int(8) not null,<br>    -&gt; number_2 int(9) not null,<br>    -&gt; primary key(number_1)<br>    -&gt; ) charset &#x3D; utf8;<br>Query OK, 0 rows affected, 3 warnings (0.01 sec)<br><br>mysql&gt; desc jisuan;<br>+----------+------+------+-----+---------+-------+<br>| Field    | Type | Null | Key | Default | Extra |<br>+----------+------+------+-----+---------+-------+<br>| number_1 | int  | NO   | PRI | NULL    |       |<br>| number_2 | int  | NO   |     | NULL    |       |<br>+----------+------+------+-----+---------+-------+<br>2 rows in set (0.01 sec)<br><br>mysql&gt; insert into jisuan values<br>    -&gt; (8,4),<br>    -&gt; (3,5),<br>    -&gt; (5,2),<br>    -&gt; (3,7);<br>    <br>ERROR 1062 (23000): Duplicate entry &#39;3&#39; for key &#39;jisuan.PRIMARY&#39;&#x2F;&#x2F;这里说是主键数值重复了 那我们删除主键在测试<br><br>mysql&gt; alter table jisuan drop primary key; &#x2F;&#x2F;删除主键<br>Query OK, 0 rows affected (0.02 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; insert into jisuan values  (8,4), (3,5), (5,2), (3,7);<br>Query OK, 4 rows affected (0.01 sec)<br>Records: 4  Duplicates: 0  Warnings: 0&#x2F;&#x2F;成功插入<br><br>mysql&gt; select number_1 * number_2 from jisuan &#x2F;&#x2F; 使用 * 号计算<br>    -&gt; where number_1 &#x3D; 3<br>    -&gt; order by number_1 ;<br>+---------------------+<br>| number_1 * number_2 |<br>+---------------------+<br>|                  15 |<br>|                  21 |<br>+---------------------+<br>2 rows in set (0.01 sec)<br><br>mysql&gt; select number_1 + number_2 from jisuan  &#x2F;&#x2F;使用 + 号进行加计算<br>    -&gt; order by number_1;<br>+---------------------+<br>| number_1 + number_2 |<br>+---------------------+<br>|                   8 |<br>|                  10 |<br>|                   7 |<br>|                  12 |<br>+---------------------+<br>4 rows in set (0.01 sec)<br><br>mysql&gt;<br><br></code></pre></td></tr></table></figure><hr><h3 id="使用数据处理函数"><a href="#使用数据处理函数" class="headerlink" title="使用数据处理函数"></a>使用数据处理函数</h3><h5 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a><strong>文本处理函数</strong></h5><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>left ( )</td><td>返回串左边的字符</td></tr><tr><td>right ( )</td><td>返回串右边的字符</td></tr><tr><td>lrtrim（）</td><td>去掉串左边的空格</td></tr><tr><td>rtrim（）</td><td>去掉串右边的空格</td></tr><tr><td>lower（）</td><td>将串转换为小写</td></tr><tr><td>upper（）</td><td>将串转换为大写</td></tr><tr><td>length（）</td><td>返回串的长度</td></tr><tr><td>locate（）</td><td>找出串的一个字串</td></tr><tr><td>soundex （）</td><td>返回串的soundex值（匹配所有发音类似的数据名）</td></tr><tr><td>substring（）</td><td>返回子串的字符</td></tr></tbody></table><blockquote><p>的SOUNDEX需要做进一步的解释。SOUNDEX是一个将任何文 本串转换为描述其语音表示的字母数字模式的算法。SOUNDEX考虑了类似 的发音字符和音节， 使得能对串进行发音比较而不是字母比较。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select upper(name) as app_name  &#x2F;&#x2F;使用 upper 函数使字符转换为大写<br>    -&gt; from websites ;<br>+----------+<br>| app_name |<br>+----------+<br>| GOOGLE   |<br>| TAOBAO   |<br>| WEIBO    |<br>| FACEBOOK |<br>| JD       |<br>+----------+<br>5 rows in set (0.01 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h5><blockquote><p>表中例举了常用的日期和时间处理函数</p></blockquote><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>AddDate()</td><td>增加一个日期（天、周等）</td></tr><tr><td>AddTime()</td><td>增加一个时间（时、分等）</td></tr><tr><td>CurDate()</td><td>返回当前日期</td></tr><tr><td>Curtime()</td><td>返回当前时间</td></tr><tr><td>Date()</td><td>返回日期时间的日期部分</td></tr><tr><td>DateDiff()</td><td>计算两个日期之差</td></tr><tr><td>Date_Add()</td><td>高度灵活的日期运算函数</td></tr><tr><td>Date_Format()</td><td>返回一个格式化的日期或时间串</td></tr><tr><td>Day()</td><td>返回一个日期的天数部分</td></tr><tr><td>DayOfWeek()</td><td>对于一个日期，返回对应的星期几</td></tr><tr><td>Hour()</td><td>返回一个时间的小时部分</td></tr><tr><td>Minute()</td><td>返回一个时间的分钟部分</td></tr><tr><td>Month()</td><td>返回一个日期的月份部分</td></tr><tr><td>Now()</td><td>返回当前日期和时间</td></tr><tr><td>Second()</td><td>返回一个时间的秒部分</td></tr><tr><td>Time()</td><td>返回一个日期时间的时间部分</td></tr><tr><td>Year()</td><td>返回一个日期的年份部分</td></tr></tbody></table><blockquote><p>使用employees表进行演示  employees 表可能有点复杂  后面我们会把本书的建表语句以及数据库导出打包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from employees;<br>+--------+-----------+-----+--------------+-----------+--------------+------------+-------+------------+------+-----+<br>| E_ID   | E_name    | sex | Professional | education | Political    | birth      | marry | Gz_time    | D_id | bz  |<br>+--------+-----------+-----+--------------+-----------+--------------+------------+-------+------------+------+-----+<br>| 100100 | 李明      | 男  | 副教授       | 硕士      | 党员         | 1967-02-01 | 否    | 1989-09-01 | B001 | 是  |<br>| 100101 | 李小光    | 男  | 讲师         | 本科      | 党员         | 1985-03-01 | 否    | 1990-10-02 | B001 | 是  |<br>| 100102 | 张伟键    | 男  | 教授         | 本科      | 党员         | 1965-05-06 | 是    | 1987-07-08 | B003 | 是  |<br>| 100103 | 石小华    | 女  | 教授         | 硕士      | 党员         | 1978-06-07 | 是    | 1992-01-01 | A001 | 是  |<br>| 100104 | 黄莉      | 女  | 助讲         | 硕士      | 群众         | 1986-03-04 | 否    | 2001-05-06 | A002 | 是  |<br>| 100105 | 余明平    | 男  | 教授         | 硕士      | 党员         | 1960-05-12 | 是    | 1983-04-05 | B001 | 是  |<br>| 100106 | 苏小明    | 男  | 教授         | 硕士      | 群众         | 1956-04-13 | 是    | 1983-04-03 | B003 | 是  |<br>| 100107 | 汤光明    | 男  | 教授         | 硕士      | 群众         | 1983-01-04 | 是    | 2007-12-06 | A004 | 是  |<br>| 100108 | 谢建设    | 男  | 副教授       | 博士      | 民进         | 1987-02-08 | 否    | 2006-08-15 | A005 | 是  |<br>| 100109 | 胡晓群    | 女  | 讲师         | 博士      | 党员         | 1990-09-28 | 否    | 2012-05-23 | B005 | 是  |<br>| 100330 | 李正中    | 男  | 副教授       | 硕士      | 群众         | 1978-10-29 | 否    | 1995-10-01 | B002 | 是  |<br>| 100331 | 王君君    | 女  | 教授         | 博士      | 党员         | 1956-11-18 | 否    | 1978-12-07 | B003 | 是  |<br>| 100332 | 赵剑      | 男  | 讲师         | 博士      | 党员         | 1967-12-25 | 否    | 1989-04-08 | B005 | 是  |<br>| 100333 | 欧阳      | 女  | 副教授       | 博士      | 民进         | 1966-03-08 | 否    | 1988-02-09 | B003 | 是  |<br>| 200100 | 李明义    | 男  | 讲师         | 硕士      | 党员         | 1965-04-17 | 否    | 1987-08-10 | B005 | 是  |<br>| 200101 | 孙美灵    | 男  | 讲师         | 硕士      | 党员         | 1977-05-16 | 否    | 1998-09-11 | B003 | 是  |<br>| 200102 | 王世明    | 男  | 副教授       | 硕士      | 党员         | 1976-03-21 | 否    | 1996-07-21 | A004 | 是  |<br>| 200103 | 张平娜    | 女  | 讲师         | 硕士      | 党员         | 1989-04-23 | 否    | 2008-06-22 | A001 | 是  |<br>| 200104 | 李美丽    | 女  | 讲师         | 博士      | 九三学社     | 1982-12-01 | 是    | 1992-05-01 | B001 | 是  |<br>| 200105 | 苏珍珍    | 女  | 副教授       | 本科      | 党员         | 1966-08-11 | 是    | 1985-08-01 | B003 | 是  |<br>| 200220 | 张白燕    | 女  | 讲师         | 博士      | 群众         | 1987-05-01 | 是    | 2011-09-02 | A001 | 是  |<br>| 200221 | 李青青    | 女  | 副教授       | 本科      | 群众         | 1964-10-06 | 是    | 1989-04-03 | A001 | 是  |<br>+--------+-----------+-----+--------------+-----------+--------------+------------+-------+------------+------+-----+<br>22 rows in set (0.01 sec)<br><br>mysql&gt; select E_name, E_ID,sex from employees<br>    -&gt; where date(Gz_time) between &#39;1990-10-02&#39; and &#39;2000-10-02&#39; ;<br>+-----------+--------+-----+<br>| E_name    | E_ID   | sex |<br>+-----------+--------+-----+<br>| 李小光    | 100101 | 男  |<br>| 石小华    | 100103 | 女  |<br>| 李正中    | 100330 | 男  |<br>| 孙美灵    | 200101 | 男  |<br>| 王世明    | 200102 | 男  |<br>| 李美丽    | 200104 | 女  |<br>+-----------+--------+-----+<br>6 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h5><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>Abs（ ）</td><td>返回一个数的绝对值</td></tr><tr><td>exp（）</td><td>返回一个数的值数值</td></tr><tr><td>mod（）</td><td>返回除操作的余数</td></tr><tr><td>rand（）</td><td>返回一个随机数</td></tr><tr><td>sin（）</td><td>返回一个角度的正弦</td></tr><tr><td>cos（）</td><td>返回一个角度的余弦</td></tr><tr><td>tan（）</td><td>返回一个角度的正切</td></tr><tr><td>sqrt（）</td><td>返回一个角度的平方根</td></tr><tr><td>pi（）</td><td>返回圆周率</td></tr></tbody></table><hr><h3 id="汇总数据（聚集函数）"><a href="#汇总数据（聚集函数）" class="headerlink" title="汇总数据（聚集函数）"></a>汇总数据（聚集函数）</h3><h5 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h5><blockquote><p>聚集函数（aggregate function） 运行在行组上，计算和返回单个值的函数。</p></blockquote><p>sql中使用的聚集函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>avg（）</td><td>返回某列的平均值</td></tr><tr><td>max（）</td><td>返回某列的最大值</td></tr><tr><td>min（）</td><td>返回某列的最小值</td></tr><tr><td>sum（）</td><td>返回某列的和</td></tr><tr><td>count（）</td><td>返回 某列的行数</td></tr></tbody></table><h5 id="AVG（）函数"><a href="#AVG（）函数" class="headerlink" title="AVG（）函数"></a>AVG（）函数</h5><blockquote><p>求取某列的平均值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select avg(number_1) as avg_number_1<br>    -&gt; from jisuan ;<br>+--------------+<br>| avg_number_1 |<br>+--------------+<br>|       4.7500 |<br>+--------------+<br>1 row in set (0.01 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="MAX（）函数"><a href="#MAX（）函数" class="headerlink" title="MAX（）函数"></a>MAX（）函数</h5><blockquote><p>返回某列的最大值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select max(number_1) as max_number_1<br>    -&gt; from jisuan ;<br>+--------------+<br>| max_number_1 |<br>+--------------+<br>|            8 |<br>+--------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="count（）函数"><a href="#count（）函数" class="headerlink" title="count（）函数"></a>count（）函数</h5><blockquote><p>COUNT()函数进行计数。可利用COUNT()确定表中行的数目或符合特 定条件的行的数目。</p><p>使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空 值（NULL）还是非空值。  使用 COUNT(column) 对特定列中具有值的行进行计数， 忽略NULL值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select count(number_1) as<br>    -&gt; count_number_1<br>    -&gt; from jisuan ;<br>+----------------+<br>| count_number_1 |<br>+----------------+<br>|              4 |<br>+----------------+<br>1 row in set (0.01 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><h5 id="聚集不同的值"><a href="#聚集不同的值" class="headerlink" title="聚集不同的值"></a>聚集不同的值</h5><blockquote><p>之前在select部分使用distinct语句去除重复值检索</p><p>以上五个函数都称为聚集函数 以上5个聚集函数都可以如下使用：</p><p>对所有的行执行计算，指定ALL参数或不给参数（因为ALL是默认 行为）；  只包含不同的值，指定DISTINCT参数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from jisuan;<br>+----------+----------+<br>| number_1 | number_2 |<br>+----------+----------+<br>|        8 |        4 |<br>|        3 |        5 |<br>|        5 |        2 |<br>|        3 |        7 |<br>+----------+----------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; select avg(distinct number_1)<br>    -&gt; as avg_number<br>    -&gt; from jisuan;<br>+------------+<br>| avg_number |<br>+------------+<br>|     5.3333 |<br>+------------+<br>1 row in set (0.01 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><blockquote><p>这样就可以排除重复值排除一些重复的值以来提高平均值的品质</p></blockquote><h5 id="组合聚集函数"><a href="#组合聚集函数" class="headerlink" title="组合聚集函数"></a>组合聚集函数</h5><blockquote><p>目前为止的所有聚集函数例子都只涉及单个函数。但实际上SELECT 语句可根据需要包含多个聚集函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select avg(number_1),<br>    -&gt; max(number_1),<br>    -&gt; min(number_1),<br>    -&gt; count(*) from jisuan ;<br>+---------------+---------------+---------------+----------+<br>| avg(number_1) | max(number_1) | min(number_1) | count(*) |<br>+---------------+---------------+---------------+----------+<br>|        4.7500 |             8 |             3 |        4 |<br>+---------------+---------------+---------------+----------+<br>1 row in set (0.01 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h3><h5 id="创建分组"><a href="#创建分组" class="headerlink" title="创建分组"></a>创建分组</h5><blockquote><p>分组是在SELECT语句的GROUP BY子句中建立的</p></blockquote><p>GROUP BY 语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT column_name, function(column_name)<br>FROM table_name<br>WHERE column_name operator value<br>GROUP BY column_name;<br></code></pre></td></tr></table></figure><p>数据库employee_tbl </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs msyql">mysql&gt; select * from employee_tbl ;<br>+----+--------+---------------------+--------+<br>| id | name   | date                | singin |<br>+----+--------+---------------------+--------+<br>|  1 | 小明   | 2016-04-22 15:25:33 |      1 |<br>|  2 | 小王   | 2016-04-20 15:25:47 |      3 |<br>|  3 | 小丽   | 2016-04-19 15:26:02 |      2 |<br>|  4 | 小王   | 2016-04-07 15:26:14 |      4 |<br>|  5 | 小明   | 2016-04-11 15:26:40 |      4 |<br>|  6 | 小明   | 2016-04-04 15:26:54 |      2 |<br>+----+--------+---------------------+--------+<br>6 rows in set (0.01 sec)<br><br></code></pre></td></tr></table></figure><p>检索出他们的登陆次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select name, count(*)使用 count 函数计数<br>    -&gt; from employee_tbl  <br>    -&gt; group by name ;  依据 name 列分组<br>+--------+----------+<br>| name   | count(*) |<br>+--------+----------+<br>| 小明   |        3 |<br>| 小王   |        2 |<br>| 小丽   |        1 |<br>+--------+----------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><p>在具体使用GROUP BY子句前，需要知道一些重要的规定。</p><p>​     GROUP BY子句可以包含任意数目的列。这使得能对分组进行嵌套， 为数据分组提供更        细    致的控制。</p><pre><code>  如果在GROUP BY子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话        说，    在建立分组时，指定的所有列都一起计算 （所以不能从个别的列取回数据）。   GROUP BY 子句中列出的每个列都必须是检索列或有效的表达式 （但不能是聚数）。        如果在 SELECT 中使用表达式， 则必须在GROUP BY子句中指定相同的表达式。不能        使用    别名。</code></pre><p>​      除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子句中给出。</p><p>​      如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列中有多行NULL值，        它    们将分为一组。 </p><p>​      GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。</p><h5 id="过滤分组"><a href="#过滤分组" class="headerlink" title="过滤分组"></a>过滤分组</h5><blockquote><p>我们将使用 having 过滤分组  之前说的 where 只能过滤行 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select name ,count(*)<br>    -&gt; from employee_tbl<br>    -&gt; group by name<br>    -&gt; having count(*) &gt;&#x3D; 2 ;&#x2F;&#x2F;使用 having 过滤分组<br>+--------+----------+<br>| name   | count(*) |<br>+--------+----------+<br>| 小明   |        3 |<br>| 小王   |        2 |<br>+--------+----------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><p>分组和排序之间的关系</p><table><thead><tr><th>order by</th><th>group by</th></tr></thead><tbody><tr><td>排序产生的输出</td><td>分组行 但输出可能不是分组的排序</td></tr><tr><td>任意列都可以使用（甚至非选择的列也可以使用）</td><td>只可能使用选择列或表达式列 而且必须使用每个选择列表达式</td></tr><tr><td>不一定需要</td><td>如果与聚集函数一起使用列（或表达式）则必须使用</td></tr></tbody></table><h5 id="select-语句顺序"><a href="#select-语句顺序" class="headerlink" title="select 语句顺序"></a>select 语句顺序</h5><table><thead><tr><th>子句</th><th>说明</th><th>是否必须使用</th></tr></thead><tbody><tr><td>select</td><td>要返回的列或者表达式</td><td>是</td></tr><tr><td>from</td><td>从中检索数据的表</td><td>尽在从表中选择数据的时候使用</td></tr><tr><td>where</td><td>行级过滤</td><td>否</td></tr><tr><td>group by</td><td>分组说明</td><td>仅在按组计算聚集是使用</td></tr><tr><td>having</td><td>组级过滤</td><td>否</td></tr><tr><td>order by</td><td>输出排序顺序</td><td>否</td></tr><tr><td>limit</td><td>要检索的行数</td><td>否</td></tr></tbody></table><h3 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h3><h5 id="使用子查询进行过滤"><a href="#使用子查询进行过滤" class="headerlink" title="使用子查询进行过滤"></a>使用子查询进行过滤</h5><blockquote><p>SQL还允许创建子查询（subquery），即嵌套在其他查询中的查询。 为什么要这样做呢？理解这个概念的最好方法是考察几个例子</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from departments  where id &#x3D; (select D_id from employees where E_name &#x3D; &#39;李明&#39; );   &#x2F;&#x2F;简单的字查询演示  这样就省去了连续查询两个表的繁琐过程<br>+------+--------------+<br>| id   | name         |<br>+------+--------------+<br>| B001 | 信息学院     |<br>+------+--------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h3><h5 id="关系表"><a href="#关系表" class="headerlink" title="关系表"></a>关系表</h5><blockquote><p>关系表的设计就是要保证把信息分解成多个表，一类数据 一个表。各表通过某些常用的值（即关系设计中的（relational））互相关联</p></blockquote><p>外键（foreign key） 外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。</p><p>使用联结表的原因 </p><blockquote><p>如果数据存储在多个表中，怎样用单条SELECT语句检索出数据？</p><p>答案是使用联结。简单地说，联结是一种机制，用来在一条SELECT 语句中关联表，因此称之为联结。使用特殊的语法，可以联结多个表返 回一组输出，联结在运行时关联表中正确的行。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>MYSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>水博客</tag>
      
      <tag>编程</tag>
      
      <tag>MYSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习:使用DOM写XML -- 绘制中国国旗的SVG文件</title>
    <link href="/2020/12/16/%E4%BD%BF%E7%94%A8DOM%E5%86%99XML%E7%BB%98%E5%88%B6%E4%B8%AD%E5%9B%BD%E5%9B%BD%E6%97%97%E7%9A%84SVG%E6%96%87%E4%BB%B6/"/>
    <url>/2020/12/16/%E4%BD%BF%E7%94%A8DOM%E5%86%99XML%E7%BB%98%E5%88%B6%E4%B8%AD%E5%9B%BD%E5%9B%BD%E6%97%97%E7%9A%84SVG%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/PureKitS/hexo_pictures_source/main/FlagPRC.png"></p><h2 id="Java-学习"><a href="#Java-学习" class="headerlink" title="Java 学习"></a>Java 学习</h2><h3 id="使用DOM写XML-–-绘制中国国旗的SVG文件"><a href="#使用DOM写XML-–-绘制中国国旗的SVG文件" class="headerlink" title="使用DOM写XML – 绘制中国国旗的SVG文件"></a>使用<code>DOM</code>写<code>XML</code> – 绘制中国国旗的<code>SVG</code>文件</h3><blockquote><p>利用 <code>Flag.java</code>文件绘制出一个<code>SVG</code>格式的中华人民共和国国旗。<code>SVG</code>文件参考了维基百科上的中国国旗的<code>SVG</code>文件</p><p>[维基百科中华人民共和国国旗](<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E5%9B%BD%E6%97%97#/media/File:Flag_of_the_People's_Republic_of_China.svg">中华人民共和国国旗 - 维基百科，自由的百科全书 (wikipedia.org)</a>)</p><p>源码已push至GitHub <a href="https://github.com/Purekits/FlagPRC">FlagPRC</a></p></blockquote><h4 id="Java-Code"><a href="#Java-Code" class="headerlink" title="Java Code"></a>Java Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.pure.flagprc;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><br><span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilder;<br><span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;<br><span class="hljs-keyword">import</span> javax.xml.parsers.ParserConfigurationException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Transformer;<br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerConfigurationException;<br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerException;<br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerFactory;<br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerFactoryConfigurationError;<br><span class="hljs-keyword">import</span> javax.xml.transform.dom.DOMSource;<br><span class="hljs-keyword">import</span> javax.xml.transform.stream.StreamResult;<br><br><span class="hljs-keyword">import</span> org.w3c.dom.Document;<br><span class="hljs-keyword">import</span> org.w3c.dom.Element;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用DOM绘制中国国旗的SVG文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> PureK1t_SVG</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020年12月11日</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span> PM17:20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@remark</span></span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlagPRC</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用DOM绘制中国国旗的SVG文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();<br>            factory.setNamespaceAware(<span class="hljs-keyword">true</span>);<br>            DocumentBuilder builder = factory.newDocumentBuilder();<br>            <span class="hljs-comment">//生成SVG</span><br>            Document doc = builder.newDocument();<br>            String namespace = <span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>;<br>            Element elementSvg = doc.createElementNS(namespace, <span class="hljs-string">&quot;svg&quot;</span>);<br>            elementSvg.setAttribute(<span class="hljs-string">&quot;xmlns:xlink&quot;</span>, <span class="hljs-string">&quot;http://www.w3.org/1999/xlink&quot;</span>);<br>            elementSvg.setAttribute(<span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-string">&quot;900&quot;</span>);<br>            elementSvg.setAttribute(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-string">&quot;600&quot;</span>);<br>            elementSvg.setAttribute(<span class="hljs-string">&quot;viewBox&quot;</span>, <span class="hljs-string">&quot;0 0 30 20&quot;</span>);<br>            doc.appendChild(elementSvg);<br>            Element elementDef = doc.createElement(<span class="hljs-string">&quot;defs&quot;</span>);<br>            elementSvg.appendChild(elementDef);<br>            Element elementPath = doc.createElement(<span class="hljs-string">&quot;path&quot;</span>);<br>            elementPath.setAttribute(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;s&quot;</span>);<br>            elementPath.setAttribute(<span class="hljs-string">&quot;d&quot;</span>,<br>                    <span class="hljs-string">&quot;M0,-1 0.587785,0.809017 -0.951057,-0.309017H0.951057L-0.587785,0.809017z&quot;</span>);<br>            elementPath.setAttribute(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;#ffde00&quot;</span>);<br>            elementDef.appendChild(elementPath);<br>            Element elementRect = doc.createElement(<span class="hljs-string">&quot;rect&quot;</span>);<br>            elementRect.setAttribute(<span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-string">&quot;30&quot;</span>);<br>            elementRect.setAttribute(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>);<br>            elementRect.setAttribute(<span class="hljs-string">&quot;fill&quot;</span>, <span class="hljs-string">&quot;#de2910&quot;</span>);<br>            elementSvg.appendChild(elementRect);<br>            Element elementUse1 = doc.createElement(<span class="hljs-string">&quot;use&quot;</span>);<br>            elementUse1.setAttribute(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-string">&quot;#s&quot;</span>);<br>            elementUse1.setAttribute(<span class="hljs-string">&quot;transform&quot;</span>, <span class="hljs-string">&quot;translate(5,5) scale(3)&quot;</span>);<br>            elementSvg.appendChild(elementUse1);<br>            Element elementUse2 = doc.createElement(<span class="hljs-string">&quot;use&quot;</span>);<br>            elementUse2.setAttribute(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-string">&quot;#s&quot;</span>);<br>            elementUse2.setAttribute(<span class="hljs-string">&quot;transform&quot;</span>, <span class="hljs-string">&quot;translate(10,2) rotate(23.036243)&quot;</span>);<br>            elementSvg.appendChild(elementUse2);<br>            Element elementUse3 = doc.createElement(<span class="hljs-string">&quot;use&quot;</span>);<br>            elementUse3.setAttribute(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-string">&quot;#s&quot;</span>);<br>            elementUse3.setAttribute(<span class="hljs-string">&quot;transform&quot;</span>, <span class="hljs-string">&quot;translate(12,4) rotate(45.869898)&quot;</span>);<br>            elementSvg.appendChild(elementUse3);<br>            Element elementUse4 = doc.createElement(<span class="hljs-string">&quot;use&quot;</span>);<br>            elementUse4.setAttribute(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-string">&quot;#s&quot;</span>);<br>            elementUse4.setAttribute(<span class="hljs-string">&quot;transform&quot;</span>, <span class="hljs-string">&quot;translate(12,7) rotate(69.945396)&quot;</span>);<br>            elementSvg.appendChild(elementUse4);<br>            Element elementUse5 = doc.createElement(<span class="hljs-string">&quot;use&quot;</span>);<br>            elementUse5.setAttribute(<span class="hljs-string">&quot;xlink:href&quot;</span>, <span class="hljs-string">&quot;#s&quot;</span>);<br>            elementUse5.setAttribute(<span class="hljs-string">&quot;transform&quot;</span>, <span class="hljs-string">&quot;translate(10,9) rotate(20.659808)&quot;</span>);<br>            elementSvg.appendChild(elementUse5);<br>            <span class="hljs-comment">//输出到文件</span><br>            File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;C:\\Users\\Purek\\Desktop\\FlagPRC.svg&quot;</span>);<br>            Transformer t = TransformerFactory.newInstance().newTransformer();<br>            t.transform(<span class="hljs-keyword">new</span> DOMSource(doc), <span class="hljs-keyword">new</span> StreamResult(<span class="hljs-keyword">new</span> FileOutputStream(file)));<br>        &#125; <span class="hljs-keyword">catch</span> (ParserConfigurationException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (TransformerConfigurationException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (TransformerFactoryConfigurationError e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (TransformerException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>运行此代码之前要修改 <code>84</code> 行的文件目录才可以可在桌面上生成一个 <code>FlagPRC.svg</code> 文件 此文件可以进行使用 如果想进一步编辑此文件 可以对此文件的<code>XML</code>代码进行格式化格式方法有很多 我使用的是 在线格式化工具 [菜鸟xml在线格式化](<a href="https://c.runoob.com/front-end/710">XML 在线格式化 | 菜鸟工具 (runoob.com)</a>)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SVG</tag>
      
      <tag>XML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈高数和编程</title>
    <link href="/2020/08/02/%E6%B5%85%E8%B0%88%E9%AB%98%E6%95%B0%E5%92%8C%E7%BC%96%E7%A8%8B/"/>
    <url>/2020/08/02/%E6%B5%85%E8%B0%88%E9%AB%98%E6%95%B0%E5%92%8C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="浅谈高数和编程"><a href="#浅谈高数和编程" class="headerlink" title="浅谈高数和编程"></a>浅谈高数和编程</h4><p>高数以及其他数学来讲对于变成尤其是应用层编程，都是属于一个充分非必要的条件。</p><p>大部分编程来讲，对于高数的要求能力不高，我们知道程序是由数据结构和算法组成的但是如果不是算法工程师不是研究性的编程、机器学习、人工智能领域以及大数据分析。基本的数学知识就能满足编程尤其是应用层的编程基本很少用到算法和高数的知识，很多时候你要的东西已经被封装好。</p><p>大一就要结束了记得刚开始接触高数的时候，确实觉得力不从心，不知道改怎么学能够将公式运用自如，渐渐的发现，其实那些公式并不是死记硬背才行只要充分理解了各个知识点，遇到题目可以分析出自己的解题思路就能吧题目解出来，所以学习高等数学记忆的负担轻了，还记得当时学习微积分的时候怎么也学不好。看过就忘（学英语也是），不过还好学的还可以，其实我觉得高等数学的学习木的并不是为了所谓的不挂科，因此我们的学习不能停留在接触答案作为目标。我们必须知道解题过程的每一步的依据。最初我们要把定理的内容记住，至少能够做的下来题目，然而我试着认真的推导定理，尽管过程并不轻松但是我却认为非常值得，因为只有通过字的探索的知识才是掌握的最好。</p><p><img src="https://raw.githubusercontent.com/PureKitS/hexo_pictures_source/main/%E6%B5%85%E8%B0%88%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E7%9A%84%E8%AE%A4%E8%AF%86.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>高数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>水博客</tag>
      
      <tag>高数</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
